using System;
using First_Csharp;
using MyClasses.Models;

namespace First_Csharp.Basic_and_OOP
{

    public class OperatorOverloading
    {
        public static void Main(String[] args)
        {
            Money m1 = new Money(1500);
            Money m2 = new Money(2000);
            Money m3 = m1*m2;
            Money m4 = m1;
            m4++;

            Console.WriteLine($"Money m1= ${m1.Amount}");
            Console.WriteLine($"Money m2= ${m2.Amount}");
            Console.WriteLine($"Money m3= ${m3.Amount}");
            Console.WriteLine($"Money m4= ${m4.Amount}");



            Console.ReadKey();
        }
    }
    public class Money
    {
        private decimal _amount;
        public decimal Amount => _amount;

        public Money(decimal amount)
        {
            this._amount=Math.Round(amount,4);   
        }
        public static Money operator  +(Money m1, Money m2)
        {
            return new Money(m1.Amount+m2.Amount);
        }
		public static Money operator -(Money m1, Money m2)
		{
			return new Money(m1.Amount-m2.Amount);
		}
		public static Money operator *(Money m1, Money m2)
		{
			return new Money(m1.Amount*m2.Amount);
		}
		public static Money operator /(Money m1, Money m2)
		{
            return new Money(m1.Amount/m2.Amount);
            
		}
        public static bool operator >(Money m1, Money m2)
        {
            return m1.Amount > m2.Amount;
        }
		public static bool operator <(Money m1, Money m2)
		{
			return m1.Amount > m2.Amount;
		}
		public static bool operator >=(Money m1, Money m2)
		{
			return m1.Amount >= m2.Amount;
		}
		public static bool operator <=(Money m1, Money m2)
		{
			return m1.Amount <= m2.Amount;
		}
        public static bool operator ==(Money m1, Money m2)
        {
            return m1.Amount == m2.Amount;
        }
		public static bool operator !=(Money m1, Money m2)
		{
			return m1.Amount != m2.Amount;
		}
        public static Money operator ++(Money m)
        {
            var value = m.Amount;
            return new Money(++value);
        }
		public static Money operator --(Money m)
		{
            var value = m.Amount;
			return new Money(--value);
		}
	}
}
